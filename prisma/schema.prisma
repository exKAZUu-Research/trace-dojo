// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// -----------------------------------------------------------------------------

model User {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  displayName        String                 @unique
  userSolvedAnswers  UserCompletedProblem[]
  ProblemAnswerLog   UserAnswer[]
  UserProblemSession UserProblemSession[]
}

model UserProblemSession {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  courseId         String
  programId        String
  languageId       String
  problemVariables ProblemVariable[]

  currentProblemType String
  currentStep        Int
  timeSpent          Int
  startedAt          DateTime
  finishedAt         DateTime
  isCompleted        Boolean
}

model ProblemVariable {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProblemSession   UserProblemSession @relation(fields: [userProblemSessionId], references: [id])
  userProblemSessionId Int

  position Int
  value    Int
}

model UserCompletedProblem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user       User   @relation(fields: [userId], references: [id])
  userId     String
  courseId   String
  programId  String
  languageId String
}

model UserAnswer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String

  programId   String
  languageId  String
  problemType String

  step     Int
  isPassed Boolean
}
